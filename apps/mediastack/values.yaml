qbittorrent:
  env:
    TZ: Europe/Zurich
  persistence:
    config:
      enabled: true
      mountPath: /config
      accessMode: ReadWriteOnce
      size: 1Gi
    data:
      enabled: true
      mountPath: /data/torrents
      existingClaim: mediastack-data
      subPath: torrents/
  ingress:
    main:
      enabled: true
      ingressClassName: nginx
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
        hajimari.io/appName: qBittorrent
        hajimari.io/icon: pirate
      hosts:
        - host: &host qbittorrent.tribz.cloud
          paths:
            - path: /
              pathType: Prefix
      tls:
        - secretName: qbittorrent-tls-certificate
          hosts:
            - *host
radarr:
  env:
    TZ: Europe/Zurich
  image:
    repository: lscr.io/linuxserver/radarr
    tag: develop
  persistence:
    config:
      enabled: true
    data:
      enabled: true
      mountPath: /data
      existingClaim: mediastack-data
  ingress:
    main:
      enabled: true
      ingressClassName: nginx
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
        external-dns.alpha.kubernetes.io/target: "homelab-tunnel.tribz.cloud"
        external-dns.alpha.kubernetes.io/cloudflare-proxied: "true"
        hajimari.io/appName: radarr
        hajimari.io/icon: pirate
        hajimari.io/group: arr
      hosts:
        - host: &host radarr.tribz.cloud
          paths:
            - path: /
              pathType: Prefix
      tls:
        - secretName: radarr-tls-certificate
          hosts:
            - *host
jellyfin:
  # use this when expanding config disk, this frees the PVC from the pod
  # controller:
  #   replicas: 0
  env:
    TZ: Europe/Zurich
  repository: lscr.io/linuxserver/jellyfin
  tag: latest
  persistence:
    config:
      enabled: true
      size: 5Gi
    data:
      enabled: true
      mountPath: /data/media
      existingClaim: mediastack-data
      subPath: media/
  ingress:
    main:
      enabled: true
      ingressClassName: nginx
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
        external-dns.alpha.kubernetes.io/target: "homelab-tunnel.tribz.cloud"
        external-dns.alpha.kubernetes.io/cloudflare-proxied: "true"
        hajimari.io/appName: Jellyfin
        hajimari.io/icon: multimedia
      hosts:
        - host: &host jellyfin.tribz.cloud
          paths:
            - path: /
              pathType: Prefix
      tls:
        - secretName: jellyfin-tls-certificate
          hosts:
            - *host
    local:
      enabled: true
      ingressClassName: nginx
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
        hajimari.io/appName: Jellyfin-Local
        hajimari.io/icon: multimedia
      hosts:
        - host: &host jellyfin-local.tribz.cloud
          paths:
            - path: /
              pathType: Prefix
      tls:
        - secretName: jellyfin-local-tls-certificate
          hosts:
            - *host
lidarr:
  env:
    TZ: Europe/Zurich
  persistence:
    config:
      enabled: true
    data:
      enabled: true
      mountPath: /data
      existingClaim: mediastack-data
  image:
    repository: lscr.io/linuxserver/lidarr
    tag: develop
  ingress:
    main:
      enabled: true
      ingressClassName: nginx
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
        hajimari.io/appName: lidarr
        hajimari.io/icon: pirate
        hajimari.io/group: arr
      hosts:
        - host: &host lidarr.tribz.cloud
          paths:
            - path: /
              pathType: Prefix
      tls:
        - secretName: lidarr-tls-certificate
          hosts:
            - *host
sonarr:
  env:
    TZ: Europe/Zurich
  persistence:
    config:
      enabled: true
    data:
      enabled: true
      mountPath: /data
      existingClaim: mediastack-data
  image:
    repository: lscr.io/linuxserver/sonarr
    tag: develop
  ingress:
    main:
      enabled: true
      ingressClassName: nginx
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
        hajimari.io/appName: Sonarr
        hajimari.io/icon: pirate
        hajimari.io/group: arr
      hosts:
        - host: &host sonarr.tribz.cloud
          paths:
            - path: /
              pathType: Prefix
      tls:
        - secretName: sonarr-tls-certificate
          hosts:
            - *host
readarr:
  env:
    TZ: Europe/Zurich
  persistence:
    config:
      enabled: true
    data:
      enabled: true
      mountPath: /data
      existingClaim: mediastack-data
  image:
    repository: lscr.io/linuxserver/readarr
    tag: develop
  ingress:
    main:
      enabled: true
      ingressClassName: nginx
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
        hajimari.io/appName: Readarr
        hajimari.io/icon: pirate
        hajimari.io/group: arr
      hosts:
        - host: &host readarr.tribz.cloud
          paths:
            - path: /
              pathType: Prefix
      tls:
        - secretName: readarr-tls-certificate
          hosts:
            - *host
prowlarr:
  env:
    TZ: Europe/Zurich
  persistence:
    config:
      enabled: true
  image:
    repository: lscr.io/linuxserver/prowlarr
    tag: develop
  ingress:
    main:
      enabled: true
      ingressClassName: nginx
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
        hajimari.io/appName: prowlarr
        hajimari.io/icon: sync
        hajimari.io/group: arr
      hosts:
        - host: &host prowlarr.tribz.cloud
          paths:
            - path: /
              pathType: Prefix
      tls:
        - secretName: prowlarr-tls-certificate
          hosts:
            - *host
botdarr:
  image:
    repository: shayaantx/botdarr
    tag: latest
    pullPolicy: IfNotPresent
  env:
    DISCORD_TOKEN: blahblah
    DISCORD_CHANNELS: channel1
    RADARR_URL: http://172.168.1.196:8989
    RADARR_TOKEN: 5958585858jggfdsjjg
    RADARR_DEFAULT_PROFILE: profile1
    RADARR_PATH: /some-path
  # securityContext:
  #   readOnlyRootFilesystem: false
  #   allowPrivilegeEscalation: true
  #   privileged: true
  #   runAsNonRoot: false
  # podSecurityContext:
  #   runAsUser: 0
  #   runAsGroup: 0
  # persistence:
  #   config:
  #     enabled: true
  #     size: 1Gi
  #   shared:
  #     enabled: true
  #     size: 1Gi
  # ingress:
  #   main:
  #     enabled: true
  #     ingressClassName: nginx
  #     annotations:
  #       cert-manager.io/cluster-issuer: letsencrypt-prod
  #       hajimari.io/appName: MySeafile
  #       hajimari.io/icon: google-drive
  #       nginx.ingress.kubernetes.io/proxy-body-size: "10g"
  #     hosts:
  #       - host: *host
  #         paths:
  #           - path: /
  #             pathType: Prefix
  #     tls:
  #       - secretName: myseafile-tls-certificate
  #         hosts:
  #           - *host
  service:
    main:
      ports:
        main:
          port: 80
          protocol: HTTP
  probes:
    liveness:
      custom: true
      spec:
        initialDelaySeconds: 25
        httpGet:
          path: /
          port: 80

    readiness:
      custom: true
      spec:
        initialDelaySeconds: 25
        httpGet:
          path: /
          port: 80

    startup:
      custom: true
      spec:
        initialDelaySeconds: 25
        httpGet:
          path: /
          port: 80