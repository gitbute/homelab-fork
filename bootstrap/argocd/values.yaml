argo-cd:
  server:
    containerPorts:
      # -- Server container port
      server: 8080
      # -- Metrics container port
      metrics: 8083
    env:
      - name: "TZ"
        value: "Europe/Zurich"
    extraArgs:
      - --insecure
    config:
      statusbadge.enabled: 'true'
      kustomize.buildOptions: '--enable-helm'
      resource.customizations.health.argoproj.io_Application: |
        hs = {}
        hs.status = "Progressing"
        hs.message = ""
        if obj.status ~= nil then
          if obj.status.health ~= nil then
            hs.status = obj.status.health.status
            if obj.status.health.message ~= nil then
              hs.message = obj.status.health.message
            end
          end
        end
        return hs
    ingress:
      enabled: true
      ingressClassName: nginx
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
        hajimari.io/appName: ArgoCD
        hajimari.io/icon: robot
      hosts:
        - &host argocd.tribz.cloud
      tls:
        - secretName: argocd-tls-certificate
          hosts:
            - *host
    metrics:
      # -- Deploy metrics service
      enabled: false
      service:
        # -- Metrics service annotations
        annotations: {}
        # -- Metrics service labels
        labels: {}
        # -- Metrics service port
        servicePort: 8083
        # -- Metrics service port name
        portName: http-metrics
  dex:
    enabled: false
  # controller:
  #   metrics: *metrics
  repoServer:
    env:
      - name: ARGOCD_EXEC_TIMEOUT
        value: 240s
    # metrics: *metrics
  redis:
    # metrics: *metrics
    exporter:
      # -- Enable Prometheus redis-exporter sidecar
      enabled: true
      ## Prometheus redis-exporter image
      image:
        # -- Repository to use for the redis-exporter
        repository: public.ecr.aws/bitnami/redis-exporter
        # -- Tag to use for the redis-exporter
        tag: 1.45.0
        # -- Image pull policy for the redis-exporter
        # @default -- `""` (defaults to global.image.imagePullPolicy)
        imagePullPolicy: ""